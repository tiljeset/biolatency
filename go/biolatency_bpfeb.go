// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type biolatencyDiskLatencyKeyT struct {
	Dev    uint32
	Op     uint8
	_      [3]byte
	Bucket uint64
}

// loadBiolatency returns the embedded CollectionSpec for biolatency.
func loadBiolatency() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BiolatencyBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load biolatency: %w", err)
	}

	return spec, err
}

// loadBiolatencyObjects loads biolatency and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*biolatencyObjects
//	*biolatencyPrograms
//	*biolatencyMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBiolatencyObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBiolatency()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// biolatencySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type biolatencySpecs struct {
	biolatencyProgramSpecs
	biolatencyMapSpecs
}

// biolatencySpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type biolatencyProgramSpecs struct {
	BlockRqComplete *ebpf.ProgramSpec `ebpf:"block_rq_complete"`
	BlockRqInsert   *ebpf.ProgramSpec `ebpf:"block_rq_insert"`
	BlockRqIssue    *ebpf.ProgramSpec `ebpf:"block_rq_issue"`
}

// biolatencyMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type biolatencyMapSpecs struct {
	BioLatencySeconds *ebpf.MapSpec `ebpf:"bio_latency_seconds"`
	Start             *ebpf.MapSpec `ebpf:"start"`
}

// biolatencyObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBiolatencyObjects or ebpf.CollectionSpec.LoadAndAssign.
type biolatencyObjects struct {
	biolatencyPrograms
	biolatencyMaps
}

func (o *biolatencyObjects) Close() error {
	return _BiolatencyClose(
		&o.biolatencyPrograms,
		&o.biolatencyMaps,
	)
}

// biolatencyMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBiolatencyObjects or ebpf.CollectionSpec.LoadAndAssign.
type biolatencyMaps struct {
	BioLatencySeconds *ebpf.Map `ebpf:"bio_latency_seconds"`
	Start             *ebpf.Map `ebpf:"start"`
}

func (m *biolatencyMaps) Close() error {
	return _BiolatencyClose(
		m.BioLatencySeconds,
		m.Start,
	)
}

// biolatencyPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBiolatencyObjects or ebpf.CollectionSpec.LoadAndAssign.
type biolatencyPrograms struct {
	BlockRqComplete *ebpf.Program `ebpf:"block_rq_complete"`
	BlockRqInsert   *ebpf.Program `ebpf:"block_rq_insert"`
	BlockRqIssue    *ebpf.Program `ebpf:"block_rq_issue"`
}

func (p *biolatencyPrograms) Close() error {
	return _BiolatencyClose(
		p.BlockRqComplete,
		p.BlockRqInsert,
		p.BlockRqIssue,
	)
}

func _BiolatencyClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed biolatency_bpfeb.o
var _BiolatencyBytes []byte
